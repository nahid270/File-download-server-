import os
import threading
from datetime import datetime
import requests
from flask import Flask, Response, abort, jsonify
from pyrogram import Client, filters
from pyrogram.types import Message
from dotenv import load_dotenv
from pymongo import MongoClient
import asyncio
import traceback # <-- ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®

# Load env variables
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
MONGO_URI = os.getenv("MONGO_URI") 
SERVER_URL = os.getenv("SERVER_URL") # <-- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ URL

# MongoDB Setup
try:
    mongo_client = MongoClient(MONGO_URI)
    db = mongo_client["TelegramFileBot"]
    files_collection = db["files"]
    print("‚úÖ MongoDB ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡•§")
except Exception as e:
    print(f"‚ùå MongoDB ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {e}")
    exit()

# Flask App
app = Flask(__name__)

# Pyrogram Bot
# ‡¶¨‡¶ü ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
bot = Client("MovieBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ‡¶è‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ü‡¶ø Pyrogram-‡¶è‡¶∞ event loop ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
pyrogram_loop = None

# --- Helper ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
# ‡¶è‡¶á async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶¨‡ßá
async def get_tg_file_url(msg_id):
    # 'async with bot' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶¨‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶ö‡¶≤‡¶õ‡ßá
    msg = await bot.get_messages(CHANNEL_ID, msg_id)
    if not msg or (not msg.document and not msg.video and not msg.audio):
        print(f"‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø {msg_id} ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶è‡¶ü‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßü‡•§")
        return None
    
    file = msg.document or msg.video or msg.audio
    file_info = await bot.get_file(file.file_id)
    # ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Telegram Bot API ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ URL
    tg_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
    return tg_url

@app.route("/")
def home():
    return "‚úÖ Telegram MovieBot Running! (MongoDB + Streaming)"

@app.route("/download/<file_id>")
def download(file_id):
    print(f"‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø: {file_id}")
    file_data = files_collection.find_one({"file_id": file_id})
    if not file_data:
        print(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø {file_id} ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return abort(404, "File not found in database!")

    try:
        # ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡¶ø‡¶®
        if not pyrogram_loop or not pyrogram_loop.is_running():
            print("‚ùå Pyrogram event loop ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡ßá‡¶á‡•§")
            return abort(503, "Service temporarily unavailable, bot is not ready.")

        # ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® event loop-‡¶è async ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        future = asyncio.run_coroutine_threadsafe(get_tg_file_url(file_data["msg_id"]), pyrogram_loop)
        tg_url = future.result(timeout=30) # ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá

        if not tg_url:
            print(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá URL ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø {file_data['msg_id']}-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
            return abort(404, "File not found on Telegram channel.")

        print(f"‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶á URL ‡¶•‡ßá‡¶ï‡ßá: {tg_url}")
        r = requests.get(tg_url, stream=True, allow_redirects=True)
        
        if r.status_code != 200:
            print(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {r.status_code} - {r.text}")
            return abort(502, "Failed to fetch file from Telegram.")

        return Response(
            r.iter_content(chunk_size=1024*1024),
            content_type=r.headers.get('Content-Type', 'application/octet-stream'),
            headers={"Content-Disposition": f"attachment; filename=\"{file_data['name']}\""}
        )

    except Exception as e:
        # ===== ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® =====
        # ‡¶Ü‡¶∏‡¶≤ ‡¶è‡¶∞‡¶∞‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ ‡¶ï‡ßÄ
        print(f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        print(traceback.format_exc()) # <-- ‡¶è‡¶ü‡¶ø ‡¶è‡¶∞‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        return abort(500, "Download link generation failed.")


@bot.on_message(filters.private & (filters.document | filters.video | filters.audio))
async def save_file(client: Client, message: Message):
    try:
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡¶ø‡¶®
        progress_msg = await message.reply_text("‚è≥ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...", quote=True)

        fwd_msg = await message.forward(CHANNEL_ID)
        file = fwd_msg.document or fwd_msg.video or fwd_msg.audio
        if not file:
            await progress_msg.edit("‚ùå ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
            return

        file_id = str(file.file_unique_id)
        file_name = getattr(file, "file_name", "unnamed_file")

        files_collection.update_one(
            {"file_id": file_id},
            {"$set": {
                "msg_id": fwd_msg.id,
                "name": file_name,
                "uploaded_by": message.from_user.id,
                "upload_time": datetime.utcnow()
            }},
            upsert=True
        )
        
        if not SERVER_URL:
            await progress_msg.edit("‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ URL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á! ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§")
            return

        download_link = f"{SERVER_URL.rstrip('/')}/download/{file_id}"
        
        await progress_msg.edit(
            f"‚úÖ **‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!**\n\n"
            f"üìÑ **‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ:** `{file_name}`\n\n"
            f"üì• **‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï:**\n{download_link}"
        )
    except Exception as e:
        print(f"‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        print(traceback.format_exc())
        await message.reply_text(f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

# Run Flask + Bot
if __name__ == "__main__":
    def run_flask():
        port = int(os.getenv("PORT", 10000))
        app.run(host="0.0.0.0", port=port)

    # Flask ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # Pyrogram ‡¶¨‡¶ü ‡¶Æ‡ßÇ‡¶≤ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞ event loop ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    print("ü§ñ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    try:
        # bot.run() ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® event loop ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá
        # ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶á loop-‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
        pyrogram_loop = asyncio.get_event_loop()
        pyrogram_loop.run_until_complete(bot.start())
        print(f"‚úÖ ‡¶¨‡¶ü @{(bot.get_me()).username} ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§")
        
        # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        pyrogram_loop.run_forever()
        
    except KeyboardInterrupt:
        print("üõë ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    finally:
        if bot.is_initialized:
            asyncio.get_event_loop().run_until_complete(bot.stop())
        print("‚úÖ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
